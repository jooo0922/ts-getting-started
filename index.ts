/**
 * .ts 파일을 생성하고 나면,
 * 그 안에서 js 코드를 그대로 작성해도 상관은 없음.
 *
 * 여기에 타입을 추가하건 뭘 하건 상관이 없지만,
 * 브라우저는 .ts 파일만 있다면 그 자체를 실행할 수는 없음.
 *
 * 따라서 이 .ts 파일을 브라우저가 인식할 수 있는 형태의
 * js 파일로 변환해줘야 하는데, 이 과정을 '컴파일(compile)' 이라고 함.
 *
 * 이 작업을 해주려면
 * npm i typescript -g
 * 로 타입스크립트 컴파일러를 글로벌 설치를 해줘야 함.
 *
 * 이렇게 글로벌로 설치한 상태가 되면
 * 나중에 다른 곳에서 ts 파일을 사용하더라도,
 * 이미 컴파일러가 글로벌에 설치된 상태이기 때문에
 * 나중에 다시 타입스크립트 컴파일러를 재설치할 필요가 없겠지.
 *
 * 이걸 설치했으면 tsc 라고 하는 명령어를
 * 터미널에서 사용하여 .ts 파일을 .js 파일로 컴파일할 수 있음.
 *
 * typescript 를 쓸 경우, 이런 식으로 tsc 명령어를 일일이 쳐서
 * 컴파일할 수도 있지만, webpack 을 사용하면, 번들링 과정에서
 * .ts 파일을 알아서 컴파일해줄 수 있게 자동화할 수 있음.
 */

/**
 * 또한, tsc 로 계속해서 컴파일하고자 한다면,
 * tsconfig.json 이라는 설정파일을 이용해서
 * 컴파일 시 부가적은 옵션을 제공할 수 있음.
 *
 * 좀 더 쉽게 설명하면, 프로젝트를 타입스크립트에서
 * js 로 변환할 때, ts 가 이 프로젝트를 어떻게 이해할 지
 * 정의해줄 수 있는 것.
 *
 * 이걸 프로젝트 폴더 내에 만들어두고 나서 tsc 를 돌리게 되면,
 * 해당 파일들을 설정파일에 적힌 compilerOptions 에 적힌 대로
 * 변환시켜줄 것임.
 *
 * 추가적인 Option 속성을 알고 싶다면
 * 공식 문서에서
 * https://www.typescriptlang.org/tsconfig
 * 이 페이지를 참고하면 됨. 사용 가능한 옵션들이 전부 나와있음.
 */

function sum(a: number, b: number): number {
  return a + b;
}

sum(10, 20);
